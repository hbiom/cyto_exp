# Gating template generator for openCyto
# Save this as e.g. "generate_template.R"
# Set output path
template_path <- "gating_template.csv"
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "singletGate", "mindensity", "mindensity", "mindensity2d"),
gating_args = c("", "", "", "", ""),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save to CSV
write.csv(gating_steps, file = template_path, row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# Load required libraries
library(flowCore)      # Core functions for reading and processing FCS data
library(openCyto)      # Automated gating tools
library(flowWorkspace) # GatingSet manipulation
library(ggcyto)        # Visualization of flow cytometry data
library(gridExtra)     # Arranging plots
library(ggplot2)       # General plotting tools
# Gating template generator for openCyto
# Save this as e.g. "generate_template.R"
# Set output path
template_path <- "gating_template.csv"
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "mindensity2d", "mindensity", "mindensity", "flowClust.2d"),
gating_args = c(
"",
"",
"",
"",
"K=2, target=c(3000,2500), quantile=0.9"
),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save the updated gating template
write.csv(gating_steps, "gating_template.csv", row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# Load required libraries
library(flowCore)      # Core functions for reading and processing FCS data
library(openCyto)      # Automated gating tools
library(flowWorkspace) # GatingSet manipulation
library(ggcyto)        # Visualization of flow cytometry data
library(gridExtra)     # Arranging plots
library(ggplot2)       # General plotting tools
# Gating template generator for openCyto
# Save this as e.g. "generate_template.R"
# Set output path
template_path <- "gating_template.csv"
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "singletGate", "mindensity", "mindensity", "flowClust.2d"),
gating_args = c(
"",
"",
"",
"",
"K=2, target=c(3000,2500), quantile=0.9"
),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save the updated gating template
write.csv(gating_steps, "gating_template.csv", row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# -------------------------------
# Step 6: Visualize each gate
# -------------------------------
autoplot(gs, "nonDebris", x = "FSC-A", y = "SSC-A") + ggtitle("Non-debris gate")
autoplot(gs, "singlets", x = "FSC-A", y = "FSC-W") + ggtitle("Singlets gate")
autoplot(gs, "CD45", x = "APC-A") + ggtitle("CD45+ gate")
autoplot(gs, "CD3", x = "FITC-A") + ggtitle("CD3+ gate")
autoplot(gs, "CD3", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 quadrant gate")
autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 quadrant gate")
# Create individual ggplots
p1 <- autoplot(gs, "nonDebris", x = "FSC-A", y = "SSC-A") + ggtitle("Non-debris gate")
p2 <- autoplot(gs, "singlets", x = "FSC-A", y = "FSC-W") + ggtitle("Singlets gate")
p3 <- autoplot(gs, "CD45", x = "APC-A") + ggtitle("CD45+ gate")
p4 <- autoplot(gs, "CD3", x = "FITC-A") + ggtitle("CD3+ gate")
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
# Arrange plots in a grid
grid_plot <- grid.arrange(p1, p2, p3, p4, p5, ncol = 2)
print(p5)
ggcyto(gs,
aes(x = `FSC-A`, y = `SSC-A`),
subset = c("nonDebris", "singlets", "CD45", "CD3", "Tcell")) +
geom_hex(bins = 100) +
facet_wrap(~`population`) +
ggtitle("Multiple gates overview") +
theme_minimal()
ggcyto(gs,
aes(x = `FSC-A`, y = `SSC-A`),
subset = c("nonDebris", "singlets", "CD45", "CD3", "Tcell")) +
geom_hex(bins = 100) +
facet_wrap(~`population`) +
ggtitle("Multiple gates overview") +
theme_minimal()
library(gridExtra)
library(ggcyto)
# Create individual plots
p1 <- ggcyto(gs, subset = "nonDebris", aes(x = `FSC-A`, y = `SSC-A`)) +
geom_hex(bins = 100) + ggtitle("nonDebris")
p2 <- ggcyto(gs, subset = "singlets", aes(x = `FSC-A`, y = `FSC-W`)) +
geom_hex(bins = 100) + ggtitle("singlets")
p3 <- ggcyto(gs, subset = "CD45", aes(x = `APC-A`)) +
geom_density() + ggtitle("CD45+")
p4 <- ggcyto(gs, subset = "CD3", aes(x = `FITC-A`)) +
geom_density() + ggtitle("CD3+")
p5 <- ggcyto(gs, subset = "Tcell", aes(x = `PerCP-Cy5-5-A`, y = `APC-Cy7-A`)) +
geom_hex(bins = 100) + ggtitle("CD4/CD8")
# Combine safely (ignore any empty ones)
plots <- list(p1, p2, p3, p4, p5)
plots_valid <- Filter(function(p) inherits(p, "gg"), plots)
# Show in grid
grid.arrange(grobs = plots_valid, ncol = 2)
plot(gt)
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
str(p1)
library(patchwork)
install.packages("patchwork")
library(patchwork)
# Combine 5 plots in a grid layout
combined_plot <- p1 + p2 + p3 + p4 + p5
library(gridExtra)
grid.arrange(p1, p2, p3, p4, p5, ncol = 3)
library(patchwork)
# Combine 5 plots in a grid layout
combined_plot <- p1 + p2 + p3 + p4 + p5
library(ggcyto)
library(patchwork)
# Coerce each plot to a pure ggplot object
gp1 <- as.ggplot(p1)
gp2 <- as.ggplot(p2)
gp3 <- as.ggplot(p3)
gp4 <- as.ggplot(p4)
gp5 <- as.ggplot(p5)
# Combine them
combined_plot <- (gp1 | gp2 | gp3) / (gp4 | gp5)
combined_plot
p4 <- autoplot(gs, "CD3", x = "FITC-A") + ggtitle("CD3+ gate")
P4
p4
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
p5
# Load required libraries
library(flowCore)      # Core functions for reading and processing FCS data
library(openCyto)      # Automated gating tools
library(flowWorkspace) # GatingSet manipulation
library(ggcyto)        # Visualization of flow cytometry data
library(gridExtra)     # Arranging plots
library(ggplot2)       # General plotting tools
# Gating template generator for openCyto
# Save this as e.g. "generate_template.R"
# Set output path
template_path <- "gating_template.csv"
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "singletGate", "mindensity", "mindensity", "flowClust.2d"),
gating_args = c(
"",
"",
"",
"",
"K=4"
),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save the updated gating template
write.csv(gating_steps, "gating_template.csv", row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# -------------------------------
# Step 6: Visualize each gate
# -------------------------------
# Create individual ggplots
p1 <- autoplot(gs, "nonDebris", x = "FSC-A", y = "SSC-A") + ggtitle("Non-debris gate")
p2 <- autoplot(gs, "singlets", x = "FSC-A", y = "FSC-W") + ggtitle("Singlets gate")
p3 <- autoplot(gs, "CD45", x = "APC-A") + ggtitle("CD45+ gate")
p4 <- autoplot(gs, "CD3", x = "FITC-A") + ggtitle("CD3+ gate")
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
library(ggcyto)
library(patchwork)
# Coerce each plot to a pure ggplot object
gp1 <- as.ggplot(p1)
gp2 <- as.ggplot(p2)
gp3 <- as.ggplot(p3)
gp4 <- as.ggplot(p4)
gp5 <- as.ggplot(p5)
# Combine them
combined_plot <- (gp1 | gp2 | gp3) / (gp4 | gp5)
combined_plot
# Gating strategy
plot(gt)
combined_plot
-------------------------------
# Step 6: Visualize each gate
# -------------------------------
# Create individual ggplots
p1 <- autoplot(gs, "nonDebris", x = "SSC-A", y = "FSC-A") + ggtitle("Non-debris gate")
combined_plot
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "singletGate", "mindensity", "mindensity", "quadGate.tmix"),
gating_args = c(
"",
"",
"",
"",
"K=4"
),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save the updated gating template
write.csv(gating_steps, "gating_template.csv", row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# Load required libraries
library(flowCore)      # Core functions for reading and processing FCS data
library(openCyto)      # Automated gating tools
library(flowWorkspace) # GatingSet manipulation
library(ggcyto)        # Visualization of flow cytometry data
library(gridExtra)     # Arranging plots
library(ggplot2)       # General plotting tools
# Gating template generator for openCyto
# Save this as e.g. "generate_template.R"
# Set output path
template_path <- "gating_template.csv"
gating_steps <- data.frame(
alias = c("nonDebris", "singlets", "CD45", "CD3", "Tcell"),
pop = c("+", "+", "+", "+", "+"),
parent = c("root", "nonDebris", "singlets", "CD45", "CD3"),
dims = c("FSC-A", "FSC-A,FSC-W", "APC-A", "FITC-A", "PerCP-Cy5-5-A,APC-Cy7-A"),
gating_method = c("mindensity", "singletGate", "mindensity", "mindensity", "flowClust.2d"),
gating_args = c(
"",
"",
"",
"",
"K=4"
),
collapseDataForGating = c("", "", "", "", ""),
groupBy = c("", "", "", "", ""),
preprocessing_method = c("", "", "", "", ""),
preprocessing_args = c("", "", "", "", ""),
stringsAsFactors = FALSE
)
# Save the updated gating template
write.csv(gating_steps, "gating_template.csv", row.names = FALSE)
cat("✅ Gating template saved to:", normalizePath(template_path), "\n")
gt_df <- read.csv(template_path, stringsAsFactors = FALSE)
print(gt_df$gating_method)
# -------------------------------
# Step 1: Load your FCS file
# -------------------------------
fcs_file <- "~/Desktop/code/cytometry/FCSfiles/yourDATA/Specimen_001_Tube_001_001.fcs"
fr <- read.FCS(fcs_file)
# -------------------------------
# Step 2: Compensation (if present)
# -------------------------------
spill <- keyword(fr)$`SPILL`
if (!is.null(spill)) {
fr <- compensate(fr, spill)
}
# -------------------------------
# Step 3: Logicle Transformation
# -------------------------------
# View available channels (optional)
print(colnames(fr))
# Update these if needed
channels_to_transform <- c("FSC-A", "SSC-A", "FITC-A", "APC-A", "PerCP-Cy5-5-A", "APC-Cy7-A")
logicle_tf <- estimateLogicle(fr, channels = channels_to_transform)
fr_trans <- transform(fr, logicle_tf)
# -------------------------------
# Step 4: Create GatingSet
# -------------------------------
fs <- flowSet(list(fr_trans))
gs <- GatingSet(fs)
# -------------------------------
# Step 5: Load and apply the gating template
# -------------------------------
gt <- gatingTemplate("gating_template.csv")
gt_gating(gt, gs)
# -------------------------------
# Step 6: Visualize each gate
# -------------------------------
# Create individual ggplots
p1 <- autoplot(gs, "nonDebris", x = "SSC-A", y = "FSC-A") + ggtitle("Non-debris gate")
p2 <- autoplot(gs, "singlets", x = "FSC-A", y = "FSC-W") + ggtitle("Singlets gate")
p3 <- autoplot(gs, "CD45", x = "APC-A") + ggtitle("CD45+ gate")
p4 <- autoplot(gs, "CD3", x = "FITC-A") + ggtitle("CD3+ gate")
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
library(ggcyto)
library(patchwork)
# Coerce each plot to a pure ggplot object
gp1 <- as.ggplot(p1)
gp2 <- as.ggplot(p2)
gp3 <- as.ggplot(p3)
gp4 <- as.ggplot(p4)
gp5 <- as.ggplot(p5)
# Combine them
combined_plot <- (gp1 | gp2 | gp3) / (gp4 | gp5)
combined_plot
# Gating strategy
plot(gt)
combined_plot
p5 <- autoplot(gs, "Tcell", x = "PerCP-Cy5-5-A", y = "APC-Cy7-A") + ggtitle("CD4/CD8 gate")
p5
autoplot(gs[[1]])
plot(gt)
gs
str(gs)
autoplot(gs[[1]])
autoplot(gs[[2]])
autoplot(gs[[1]])
